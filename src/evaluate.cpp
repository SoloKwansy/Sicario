
#include <iostream>
#include "evaluate.hpp"

namespace Opening {
    const float w_pawn[64] = {
        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,
       -0.6, -0.6, -0.5, -0.5, -0.5, -0.5, -0.6, -0.6,
       -0.4, -0.4, -0.4, -0.4, -0.4, -0.4, -0.4, -0.4,
       -0.2, -0.2,  0.7,  0.8,  0.8,  0.6, -0.2, -0.2,
        0.0,  0.0,  0.8,  0.9,  0.9,  0.7,  0.0,  0.0,
        0.2,  0.1, -0.5, -0.9, -0.9, -0.5,  0.1,  0.2,
        0.9,  0.9,  0.9, -2.0, -2.0,  0.9,  0.9,  0.9,
        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0
    };

    const float b_pawn[64] = {
        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,
       -0.9, -0.9, -0.9,  2.0,  2.0, -0.9, -0.9, -0.9,
       -0.2, -0.1,  0.5,  0.9,  0.9,  0.5, -0.1, -0.2,
        0.0,  0.0, -0.8, -0.9, -0.9, -0.7,  0.0,  0.0,
        0.2,  0.2, -0.7, -0.8, -0.8, -0.6,  0.2,  0.2,
        0.4,  0.4,  0.4,  0.4,  0.4,  0.4,  0.4,  0.4,
        0.6,  0.6,  0.5,  0.5,  0.5,  0.5,  0.6,  0.6,
        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0
    };

    const double material_value[12] = {
        0, 0, 9, 5, 3.25, 3, 1, -9, -5, -3.25, -3, -1
    };

    const bool is_phase(Game* game) {
        if (game->fullmove <= 12) {
            return true;
        }
        return false;
    }
}

namespace MiddleGame {
    const float w_pawn[64] = {
        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,
        0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,
        0.1,  0.2,  0.4,  0.6,  0.6,  0.4,  0.2,  0.1,
        0.1,  0.2,  0.8,  0.9,  0.9,  0.7,  0.2,  0.1,
        0.1,  0.1,  0.8,  0.9,  0.9,  0.7,  0.1,  0.1,
        0.3,  0.1, -0.5, -0.9, -0.9, -0.5,  0.1,  0.3,
        0.8,  0.9,  0.9, -3.0, -3.0,  0.9,  0.9,  0.8,
        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0
    };

    const float b_pawn[64] = {
        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,
       -0.8, -0.9, -0.9,  3.0,  3.0, -0.9, -0.9, -0.8,
       -0.3, -0.1,  0.5,  0.9,  0.9,  0.5, -0.1, -0.3,
       -0.1, -0.1, -0.8, -0.9, -0.9, -0.7, -0.1, -0.1,
       -0.1, -0.2, -0.8, -0.9, -0.9, -0.7, -0.2, -0.1,
       -0.1, -0.2, -0.4, -0.6, -0.6, -0.4, -0.2, -0.1,
       -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1,
        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0
    };

    const double material_value[12] = {
        0, 0, 9, 5, 3.25, 3, 1, -9, -5, -3.25, -3, -1
    };

    const bool is_phase(Game* game) {
        if (game->fullmove > 12 && (game->piece_index[W_QUEEN] || game->piece_index[B_QUEEN])) {
            return true;
        }
        return false;
    }
}

namespace EndGame {
    const float w_pawn[64] = {
        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,
        1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,
        0.9,  0.9,  0.9,  0.9,  0.9,  0.9,  0.9,  0.9,
        0.7,  0.7,  0.7,  0.7,  0.7,  0.7,  0.7,  0.7,
        0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,
        0.3,  0.3,  0.3,  0.3,  0.3,  0.3,  0.3,  0.3,
        0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,
        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0
    };

    const float b_pawn[64] = {
        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,
       -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1,
       -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3,
       -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5,
       -0.7, -0.7, -0.7, -0.7, -0.7, -0.7, -0.7, -0.7,
       -0.9, -0.9, -0.9, -0.9, -0.9, -0.9, -0.9, -0.9,
       -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
        0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0
    };

    const double material_value[12] = {
        0, 0, 9, 5, 3.25, 3, 1, -9, -5, -3.25, -3, -1
    };

    const bool is_phase(Game* game) {
        if (game->fullmove > 12 && !game->piece_index[W_QUEEN] && !game->piece_index[B_QUEEN]) {
            return true;
        }
        return false;
    }
}


Evaluator::Evaluator(Game* game) {
    this->game = game;
}

int Evaluator::evaluate(Game* game) {
    return material();
}

/**
 * Computes the raw materials evaluation of the board and returns it.
 */
double Evaluator::material() {
    double value = 0;
    for (int i = 0; i < 12; i++) {
        for (int j = 0; j < game->piece_index[i]; j++) {
            value += material_value[i];
        }
    }
    return value;
}
